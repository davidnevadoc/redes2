.TH "src/G-2302-05-P1-ircserver.c" 3 "Wed May 3 2017" "Redes 2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/G-2302-05-P1-ircserver.c \- 
.PP
Funciones de manejo de variables globales\&.  

.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./includes/G-2302-05-P1-ircserver\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSTART\fP   3"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBinit_var\fP (void)"
.br
.RI "\fIFunción que reserva memoria para las estructuras globales\&. \fP"
.ti -1c
.RI "int \fBset_user\fP (int sockfd, char *\fBuser\fP)"
.br
.RI "\fIAsigna un nuevo nombre de usuario al socket sockfd\&. \fP"
.ti -1c
.RI "int \fBset_nick\fP (int sockfd, char *\fBnick\fP)"
.br
.RI "\fIAsigna un nuevo nick al socket sockfd\&. \fP"
.ti -1c
.RI "int \fBget_sock_by_nick\fP (char *\fBnick\fP)"
.br
.RI "\fIDevuelve el socket de un usuario identificado por su nick\&. \fP"
.ti -1c
.RI "int \fBget_sock_by_user\fP (char *\fBuser\fP)"
.br
.RI "\fIDevuelve el socket de un usuario identificado por su nick\&. \fP"
.ti -1c
.RI "char * \fBget_nick\fP (int sockfd)"
.br
.RI "\fIDevuelve el nick del usuario asgnado a un socket\&. \fP"
.ti -1c
.RI "char * \fBget_user\fP (int sockfd)"
.br
.RI "\fIDevuelve el nombre de usuario del usuario asgnado a un socket\&. \fP"
.ti -1c
.RI "void \fBfree_all\fP (void)"
.br
.RI "\fILibera todos los recursos utilizados\&. \fP"
.ti -1c
.RI "char * \fBget_host\fP (int *sockfd)"
.br
.RI "\fIDevuelve el host asociado al socket\&. \fP"
.ti -1c
.RI "long \fBComplexUser_bySocket\fP (char **prefix, int *psocket)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "pthread_mutex_t \fBusers_mutex\fP"
.br
.ti -1c
.RI "pthread_mutex_t \fBnicks_mutex\fP"
.br
.ti -1c
.RI "char ** \fBusers\fP = NULL"
.br
.ti -1c
.RI "char ** \fBnicks\fP = NULL"
.br
.in -1c
.SH "Detailed Description"
.PP 
Funciones de manejo de variables globales\&. 


.SH "AUTHOR"
.PP
Maria Prieto 
.SH "AUTHOR"
.PP
David Nevado Catalan david.nevadoc@estudiante.uam.es 
.SH "DATE"
.PP
02/03/2017 
.SH "Function Documentation"
.PP 
.SS "long ComplexUser_bySocket (char **prefix, int *psocket)"
Wrapper para la funcion IRC_ComplexUser1459\&. Devuelve el prefijo de un usuario utilizando unicamente el identificador del socket 
.PP
\fBParameters:\fP
.RS 4
\fIprefix\fP Puntero a la cadena de caracteres donde se almacena el prefijo obtenido, es decir, el prefijo asociado al socket psocket Puntero al socket del usuario cuyo prefijo se quiere obtener  se devuelve el codigo de control de la funcion IRC_COmplexUser1459 
.RE
.PP

.SS "void free_all (void)"

.PP
Libera todos los recursos utilizados\&. Libera la lista de usuarios y nicks asi como las estructuras mutex 
.SS "char* get_host (int *sockfd)"

.PP
Devuelve el host asociado al socket\&. Devuelve el host asociado a un socket, reserva memoria para la cadena de caracteres devuelta\&. Es decir, esta debera ser liberada posteriormente 
.PP
\fBParameters:\fP
.RS 4
\fIsockfd\fP Puntero al socket 
.RE
.PP
.SH "RETURN"
.PP
host asociao a socketfd 
.SS "char* get_nick (intsockfd)"

.PP
Devuelve el nick del usuario asgnado a un socket\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsockfd\fP socket que identifica al usuario 
.RE
.PP
.SH "RETURN"
.PP
aux nick solicitado, NULL si no se encontro 
.SS "int get_sock_by_nick (char *nick)"

.PP
Devuelve el socket de un usuario identificado por su nick\&. En caso de que hubiera dos usuarios con el mismo nick (no deberia pasar) devuelve el primero que encuentre
.PP
\fBParameters:\fP
.RS 4
\fInick\fP nick del usuario cuyo socket queremos conseguir 
.RE
.PP
.SH "RETURN"
.PP
i socket del usuario, NOT_FOUND si no se encontro ningun usuario con el nick especificado 
.SS "int get_sock_by_user (char *user)"

.PP
Devuelve el socket de un usuario identificado por su nick\&. En caso de que hubiera dos usuarios con el mismo nombre de usuario (no deberia pasar) devuelve el primero que encuentre
.PP
\fBParameters:\fP
.RS 4
\fIuser\fP nombre del usuario cuyo socket queremos conseguir 
.RE
.PP
.SH "RETURN"
.PP
i socket del usuario, NOT_FOUND si no se encontro ningun usuario especificado 
.SS "char* get_user (intsockfd)"

.PP
Devuelve el nombre de usuario del usuario asgnado a un socket\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsockfd\fP socket que identifica al usuario 
.RE
.PP
.SH "RETURN"
.PP
aux nombre de usuario solicitado, NULL si no se encontro 
.SS "int init_var (void)"

.PP
Función que reserva memoria para las estructuras globales\&. 
.SH "RETURN"
.PP
OK si todo fue bien, ERROR si se produjo algun error 
.SS "int set_nick (intsockfd, char *nick)"

.PP
Asigna un nuevo nick al socket sockfd\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsockfd\fP socket que identifica al usuario 
.br
\fInick\fP nuevo nick para el usuario 
.RE
.PP
.SH "RETURN"
.PP
OK si todo fue bien, codigo de error <0 en otro caso 
.SS "int set_user (intsockfd, char *user)"

.PP
Asigna un nuevo nombre de usuario al socket sockfd\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsockfd\fP socket que identifica al usuario 
.br
\fIuser\fP nuevo nombre para el usuario 
.RE
.PP
.SH "RETURN"
.PP
OK si todo fue bien, codigo de error <0 en otro caso 
.SH "Author"
.PP 
Generated automatically by Doxygen for Redes 2 from the source code\&.
